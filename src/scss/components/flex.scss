// Name:            Flex
// Description:     Utilities for layouts based on flexbox
//
// Component:       `vds-flex-*`
//
// ========================================================================

/* ========================================================================
   Component: Flex
 ========================================================================== */

.vds-flex {
    display: flex;
}
.vds-flex-inline {
    display: inline-flex;
}

/* Alignment
 ========================================================================== */

/*
 * Align items along the main axis of the current line of the flex container
 * Row: Horizontal
 */

// Default
.vds-flex-left {
    justify-content: flex-start;
}
.vds-flex-center {
    justify-content: center;
}
.vds-flex-right {
    justify-content: flex-end;
}
.vds-flex-between {
    justify-content: space-between;
}
.vds-flex-around {
    justify-content: space-around;
}

/* Phone landscape and bigger */
@media (min-width: $breakpoint-small) {
    .vds-flex-left\@s {
        justify-content: flex-start;
    }
    .vds-flex-center\@s {
        justify-content: center;
    }
    .vds-flex-right\@s {
        justify-content: flex-end;
    }
    .vds-flex-between\@s {
        justify-content: space-between;
    }
    .vds-flex-around\@s {
        justify-content: space-around;
    }
}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {
    .vds-flex-left\@m {
        justify-content: flex-start;
    }
    .vds-flex-center\@m {
        justify-content: center;
    }
    .vds-flex-right\@m {
        justify-content: flex-end;
    }
    .vds-flex-between\@m {
        justify-content: space-between;
    }
    .vds-flex-around\@m {
        justify-content: space-around;
    }
}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {
    .vds-flex-left\@l {
        justify-content: flex-start;
    }
    .vds-flex-center\@l {
        justify-content: center;
    }
    .vds-flex-right\@l {
        justify-content: flex-end;
    }
    .vds-flex-between\@l {
        justify-content: space-between;
    }
    .vds-flex-around\@l {
        justify-content: space-around;
    }
}

/* Large screen and bigger */
@media (min-width: $breakpoint-xlarge) {
    .vds-flex-left\@xl {
        justify-content: flex-start;
    }
    .vds-flex-center\@xl {
        justify-content: center;
    }
    .vds-flex-right\@xl {
        justify-content: flex-end;
    }
    .vds-flex-between\@xl {
        justify-content: space-between;
    }
    .vds-flex-around\@xl {
        justify-content: space-around;
    }
}

/*
 * Align items in the cross axis of the current line of the flex container
 * Row: Vertical
 */

// Default
.vds-flex-stretch {
    align-items: stretch;
}
.vds-flex-top {
    align-items: flex-start;
}
.vds-flex-middle {
    align-items: center;
}
.vds-flex-bottom {
    align-items: flex-end;
}

/* Direction
 ========================================================================== */

// Default
.vds-flex-row {
    flex-direction: row;
}
.vds-flex-row-reverse {
    flex-direction: row-reverse;
}
.vds-flex-column {
    flex-direction: column;
}
.vds-flex-column-reverse {
    flex-direction: column-reverse;
}

/* Wrap
 ========================================================================== */

// Default
.vds-flex-nowrap {
    flex-wrap: nowrap;
}
.vds-flex-wrap {
    flex-wrap: wrap;
}
.vds-flex-wrap-reverse {
    flex-wrap: wrap-reverse;
}

/*
 * Aligns items within the flex container when there is extra space in the cross-axis
 * Only works if there is more than one line of flex items
 */

// Default
.vds-flex-wrap-stretch {
    align-content: stretch;
}
.vds-flex-wrap-top {
    align-content: flex-start;
}
.vds-flex-wrap-middle {
    align-content: center;
}
.vds-flex-wrap-bottom {
    align-content: flex-end;
}
.vds-flex-wrap-between {
    align-content: space-between;
}
.vds-flex-wrap-around {
    align-content: space-around;
}

/* Item ordering
 ========================================================================== */

/*
 * Default is 0
 */

.vds-flex-first {
    order: -1;
}
.vds-flex-last {
    order: 99;
}

/* Phone landscape and bigger */
@media (min-width: $breakpoint-small) {
    .vds-flex-first\@s {
        order: -1;
    }
    .vds-flex-last\@s {
        order: 99;
    }
}

/* Tablet landscape and bigger */
@media (min-width: $breakpoint-medium) {
    .vds-flex-first\@m {
        order: -1;
    }
    .vds-flex-last\@m {
        order: 99;
    }
}

/* Desktop and bigger */
@media (min-width: $breakpoint-large) {
    .vds-flex-first\@l {
        order: -1;
    }
    .vds-flex-last\@l {
        order: 99;
    }
}

/* Large screen and bigger */
@media (min-width: $breakpoint-xlarge) {
    .vds-flex-first\@xl {
        order: -1;
    }
    .vds-flex-last\@xl {
        order: 99;
    }
}

/* Item dimensions
 ========================================================================== */

/*
 * Initial: 0 1 auto
 * Content dimensions, but shrinks
 */

/*
 * No Flex: 0 0 auto
 * Content dimensions
 */

.vds-flex-none {
    flex: none;
}

/*
 * Relative Flex: 1 1 auto
 * Space is allocated considering content
 */

.vds-flex-auto {
    flex: auto;
}

/*
 * Absolute Flex: 1 1 0%
 * Space is allocated solely based on flex
 */

.vds-flex-1 {
    flex: 1;
}

// Hooks
// ========================================================================

@if (mixin-exists(hook-flex-misc)) {
    @include hook-flex-misc();
}

// @mixin hook-flex-misc(){}
